package gui;


/**
 *
 * @Filename NewJFrame.java
 *
 * @Version $Id: NewJFrame.java,v 1.0 2014/02/25 09:23:00 $
 *
 * @Revisions
 *     Initial Revision
 */

import businesscode.*;
import connect.JDBCMySQLMain;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;


/**
 * <p/>
 * It is the main file that runs the project.
 * The Main UI pageis cretaedusingthis class file
 *
 * @author Harsimrat Parmar
 */
public class NewJFrame extends javax.swing.JFrame {

    // Object of  JDBCMySQLMain
    JDBCMySQLMain main;

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        main = new JDBCMySQLMain();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Select Table: ");

        jButton1.setText("Data");
        jButton1.setActionCommand("View Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"County", "Demographics", "Restaurant", "Stores", "HealthStatistics", "Diseases"}));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Analysis of State Demographics & Health Factors");

        jLabel3.setText("OR");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Per Capita Income and Number of Restaurants",
                "Obesity Analysis in USA",
                "Population of a County for a Particular Year Along With Number of Restaurants, Per Capita Income and Obesity Rate",
                "Demographics of a County and Disease",
                "Disease along with Number of Hospitals, Poverty and Death Rate",
                "Obesity and Physical Activity",
                "Obesity Rate and Number of Restaurant(Fast food)"}));

        jLabel4.setText("Select Result");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel5.setText("VIEW DATA");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel6.setText("DATA MINING ANALYSIS");

        jButton2.setText("Table");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setText("or");

        jButton3.setText("Graph");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(58, 58, 58)
                                        .addComponent(jButton2)
                                        .addGap(25, 25, 25)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton3))
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                .addGap(2, 2, 2)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                        .addGap(28, 28, 28)
                                        .addComponent(jButton1))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel2)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton1))
                        .addGap(52, 52, 52)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton2)
                                .addComponent(jButton3)
                                .addComponent(jLabel7))
                        .addContainerGap(144, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
        );

        pack();
    }

    /**
     * Action for jButton2
     *
     * @param evt
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        String value = (String) jComboBox2.getSelectedItem();

        // action for "Per Capita Income and Number of Restaurants" 
        if (value == "Per Capita Income and Number of Restaurants") {
            PerCapitaIncomeRestaurants perCapitaIncomeRestaurants = new PerCapitaIncomeRestaurants();
            value = perCapitaIncomeRestaurants.getQuery();
            ResultSet resultSet = main.getData(value);
            createTable(resultSet);
        }

        // Obesity Analysis in USA
        if (value == "Obesity Analysis in USA") {
            ObesityAnalysis avgOb = new ObesityAnalysis();
            value = avgOb.getQuery();
            ResultSet resultSet = main.getData(value);
            createTable(resultSet);

        }

        // Population of a County for a Particular Year Along With Number of Restaurants, Per Capita Income and Obesity Rate
        if (value == "Population of a County for a Particular Year Along With Number of Restaurants, Per Capita Income and Obesity Rate") {
            PerCapComp perCapComp = new PerCapComp();
            value = perCapComp.getQuery();
            ResultSet resultSet = main.getData(value);
            createTable(resultSet);
        }

        //Type of People and Per capita income
        if (value == "Type of People and Per capita income") {

        }

        // Demographics of a County and Disease 
        if (value == "Demographics of a County and Disease") {
            Demograph demograph = new Demograph();
            value = demograph.getQuery();
            ResultSet resultSet = main.getData(value);
            createTable(resultSet);
        }

        //Disease along with Number of Hospitals, Poverty and Death Rate
        if (value == "Disease along with Number of Hospitals, Poverty and Death Rate") {
            DiseaseRelation diseaseRelation = new DiseaseRelation();
            value = diseaseRelation.getQuery();
            ResultSet resultSet = main.getData(value);
            createTable(resultSet);
        }

        // Obesity and Physical Activity 
        if (value == "Obesity and Physical Activity") {
            ObesityActivity obesityActivity = new ObesityActivity();
            value = obesityActivity.getQuery();
            ResultSet resultSet = main.getData(value);
            createTable(resultSet);
        }

        // Obesity Rate and Number of Restaurant(Fast food) 
        if (value == "Obesity Rate and Number of Restaurant(Fast food)") {
            ObesityRestaurant obesityRestaurant = new ObesityRestaurant();
            value = obesityRestaurant.getQuery();
            ResultSet resultSet = main.getData(value);
            createTable(resultSet);
        }
    }

    /**
     * Action performed on jButton3
     *
     * @param evt
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        String value = (String) jComboBox2.getSelectedItem();

        // Per Capita Income and Number of Restaurants 
        if (value == "Per Capita Income and Number of Restaurants") {
            PerCapitaIncomeRestaurants perCapitaIncomeRestaurants = new PerCapitaIncomeRestaurants();
            perCapitaIncomeRestaurants.getResults();
        }

        // Obesity Analysis in USA
        if (value == "Obesity Analysis in USA") {

            ObesityAnalysis avgOb = new ObesityAnalysis();
            avgOb.getResults();

        }

        // Population of a County for a Particular Year Along With Number of Restaurants, Per Capita Income and Obesity Rate
        if (value == "Population of a County for a Particular Year Along With Number of Restaurants, Per Capita Income and Obesity Rate") {
            PerCapComp perCapComp = new PerCapComp();
            perCapComp.getResults();
        }

        // Type of People and Per capita income 
        if (value == "Type of People and Per capita income") {

        }

        // Demographics of a County and Disease 
        if (value == "Demographics of a County and Disease") {
            Demograph demograph = new Demograph();
            demograph.getResults();
        }

        // Disease along with Number of Hospitals, Poverty and Death Rate
        if (value == "Disease along with Number of Hospitals, Poverty and Death Rate") {
            DiseaseRelation diseaseRelation = new DiseaseRelation();
            diseaseRelation.getResults();

        }

        // Obesity and Physical Activity 
        if (value == "Obesity and Physical Activity") {
            ObesityActivity obesityActivity = new ObesityActivity();
            obesityActivity.getResults();
        }

        // Obesity Rate and Number of Restaurant(Fast food) 
        if (value == "Obesity Rate and Number of Restaurant(Fast food)") {
            ObesityRestaurant obesityRestaurant = new ObesityRestaurant();
            obesityRestaurant.getResults();

        }
    }

    /**
     * Method for creating tables
     *
     * @param resultSet
     */
    private void createTable(ResultSet resultSet) {
        String object[][] = null;
        String columnNames[] = null;

        try {

            resultSet.last();
            int rowCount = resultSet.getRow() - 1;
            resultSet.first();
            ResultSetMetaData rsmd = resultSet.getMetaData();

            int colCount = rsmd.getColumnCount();
            object = new String[rowCount][colCount];
            columnNames = new String[colCount];

            for (int i = 1; i <= colCount; i++)
                columnNames[i - 1] = rsmd.getColumnName(i);

            int count = 0;
            while (resultSet.next()) {

                for (int i = 1; i <= colCount; i++) {
                    object[count][i - 1] = resultSet.getString(i);
                }
                count++;
            }

            // Renders the table on the UI
            SimpleTable simpleTable = new SimpleTable(object, columnNames);


        } catch (SQLException e) {
            e.printStackTrace();
        }


    }


    /**
     * jButton1 for showing the tables 
     *
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {

        String value = (String) jComboBox1.getSelectedItem();
        value = "Select * from  " + value;
        ResultSet resultSet = main.getData(value);
        createTable(resultSet);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration

}
